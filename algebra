#!/usr/bin/env ruby

class Solver

	attr_accessor :n, :guess, :answer, :verbose

	def initialize equation, accuracy, verbose
		@n = 0
		@precision = 1
		@accuracy = accuracy
		@equation = equation
		@answer = evaluate @equation.split("=")[1]
		@verbose = verbose
	end

	def evaluate expr
		expr.gsub! /x/i, @n.to_s
		expr.gsub!(/(sqrt|log)/i) { "Math::#{$1.downcase}" }
		expr.gsub!(/(pi|e)/i) { "Math::#{$1.upcase}" }
		eval(expr).round @accuracy
	end

	def try_equation
		equality = @equation.split("=")[0].gsub /x/i, @n.to_s
		puts "Trying #{equality} = #{@answer}".squeeze " " if @verbose
		@guess = evaluate equality
		if @guess > @answer
			subtract_from_n
			add_precision
		end
		@guess == @answer
	end

	def add_to_n
		case @n
		when Fixnum
			@n += @precision
		when Float
			num_to_add = "0.#{'0' * (@precision - 1)}1".to_f
			@n = ("%.#{@precision}f" % (@n + num_to_add)).to_f
		end
	end

	def subtract_from_n
		case @n
		when Fixnum
			@n -= @precision
		when Float
			num_to_subtract = "0.#{'0' * (@precision - 1)}1".to_f
			@n = ("%.#{@precision}f" % (@n - num_to_subtract)).to_f
		end
	end

	def add_precision
		case @n
		when Fixnum
			@n = "#{n}.1".to_f
			# @n = @n.to_f
		when Float
			num_to_add = "0.#{'0' * @precision}1".to_f
			@precision += 1
			@n = ("%.#{@precision}f" % (@n + num_to_add)).to_f
		end
	end
end

until ARGV.empty?
	case ARGV[0]
	when "-v"
		verbose = true
		ARGV.shift
	when "-a", "-p"
		ARGV.shift
		accuracy = ARGV.shift.to_i
	else
		equation = ARGV.shift
	end
end

s = Solver.new equation, accuracy ||= 2, verbose ||= false

result = s.try_equation
until result 
	s.add_to_n unless s.guess > s.answer
	result = s.try_equation
end

puts "x = #{s.n}"
